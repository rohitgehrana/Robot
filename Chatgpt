from openai import OpenAI
import os
import pygame
import datetime
from datetime import date
from datetime import datetime


# Set your OpenAI API key as an environment variable
api_key = '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'
os.environ["OPENAI_API_KEY"] = api_key

#AI BRAIN
user_conversation = [{"role": "system", "content": "Your name is Alfa and you are a human like robot whose work is to communicate with humans. You can remember names."}]






today_date = date.today()
formatted_date = today_date.strftime("%Y-%m-%d")

date = f"Todays date is {formatted_date}"
memory_date = dict(role="system",content=date)
user_conversation.append(memory_date)




current_time = datetime.now().strftime("%H:%M:%S")
time = f"Todays time is {current_time}"
memory_time = dict(role="system",content=time)
user_conversation.append(memory_time)






client = OpenAI()

'''


'''




#LOOP
while True:
        import speech_recognition as sr
        import pyaudio
        import wave
        from pydub import AudioSegment

        def record_audio():
            recognizer = sr.Recognizer()

            with sr.Microphone() as source:
                print("Say 'Alpha' to activate the recording.")
                audio_data = recognizer.listen(source)

                try:
                    keyword = recognizer.recognize_google(audio_data).lower()
                    if 'alpha' in keyword:
                        print("Activation keyword detected. Recording...")
                        return True, audio_data
                    else:
                        print("Activation keyword not detected. Exiting.")
                        return False, None
                except sr.UnknownValueError:
                    
                    print("Could not understand audio. Exiting.")
                    return False, None
                except sr.RequestError as e:
                    print(f"Error with the API request; {e}. Exiting.")
                    return False, None

        def save_audio(file_path, audio_data, format='wav'):
            if format == 'wav':
                with wave.open(file_path, 'wb') as wf:
                    wf.setnchannels(1)
                    wf.setsampwidth(2)
                    wf.setframerate(44100)
                    wf.writeframes(audio_data.frame_data)
            elif format == 'mp3':
                audio_segment = AudioSegment(
                    audio_data.frame_data, 
                    sample_width=audio_data.sample_width, 
                    frame_rate=audio_data.sample_rate, 
                    channels=1
                )
                audio_segment.export(file_path, format='mp3')

        def main():
            activated, audio_data = record_audio()
            if activated and audio_data:
                save_audio("recorded_output.mp3", audio_data, format='mp3')
                print("Recording saved as 'recorded_output.mp3'.")

        if __name__ == "__main__":
            main()

                

        from openai import OpenAI
        client = OpenAI()

        audio_file = open("recorded_output.mp3", "rb")
        transcript = client.audio.transcriptions.create(
        model="whisper-1", 
        file=audio_file, 
        response_format="text"
        )
        print(transcript)





        #USER PROMPT
        prompt = transcript

        #MEMORIES HOUSE
        user_conversation.append(dict(role="user", content=prompt))



        #THOUGHTS HOUSE
        response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages= user_conversation
        )
        response_message = response.choices[0].message.content
        user_conversation.append(dict(role="assistant", content=response_message))

        print(response_message)








        #TEXT TO SPEECH CORNER
        response = client.audio.speech.create(
        model="tts-1",
        voice="alloy",
        input=response_message,
        )

        response.stream_to_file("output.mp3")


        import pygame

        # Initialize Pygame
        pygame.init()

        # Path to the MP3 file
        mp3_file_path = "output.mp3"

        # Create a Pygame mixer
        pygame.mixer.init()

        # Load the MP3 file
        sound = pygame.mixer.Sound(mp3_file_path)

        # Play the sound
        sound.play()

        # Wait for the sound to finish playing
        pygame.time.wait(int(sound.get_length() * 1000))  # Convert seconds to milliseconds
        
